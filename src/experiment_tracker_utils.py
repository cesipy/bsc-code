import experiment_tracker


def print_summary(training_results: dict):
    """Print a summary of training results, generated by genai"""
    print("\n" + "="*60)
    print("TRAINING SUMMARY")
    print("="*60)

    config = training_results.get("config", {})
    print(f"\nConfiguration:")
    print(f"  Coattention layers (text):   {config.get('t_biattention_ids', [])}")
    print(f"  Coattention layers (vision): {config.get('v_biattention_ids', [])}")
    print(f"  Learning rate: {config.get('learning_rate', 'N/A'):.2e}")
    print(f"  Epochs: {config.get('epochs', 'N/A')}")
    print(f"  Seed: {config.get('seed', 'N/A')}")
    print(f"  Contrastive loss: {config.get('use_contrastive_loss', False)}")

    for task in ["hateful_memes", "mm_imdb"]:

        if training_results[task]["training"]["1"] == {}:
            continue
        if task not in training_results:
            continue

        print(f"\n{task.upper().replace('_', ' ')}:")
        training = training_results[task].get("training", {})

        if not training:
            print("  No training data ")
            continue

        epochs = sorted([k for k in training.keys() if isinstance(k, int)])

        if epochs:
            last_epoch = epochs[-1]
            last_metrics = training[last_epoch]

            # Find best metrics across all epochs
            best_val_acc = max([training[e].get("val_acc", 0) for e in epochs])
            best_val_loss = min([training[e].get("val_loss", float('inf')) for e in epochs])

            print(f"  Final epoch ({last_epoch}):")
            print(f"    Train loss: {last_metrics.get('train_loss', 'N/A'):.4f}")
            print(f"    Val loss:   {last_metrics.get('val_loss', 'N/A'):.4f}")
            print(f"    Val acc:    {last_metrics.get('val_acc', 'N/A'):.4f}")
            print(f"  Best across all epochs:")
            print(f"    Best val acc:  {best_val_acc:.4f}")
            print(f"    Best val loss: {best_val_loss:.4f}")

    print("="*60 + "\n")
